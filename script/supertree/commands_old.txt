### Previous attempts ###



# this was git repo readme part for the distance-based attempt


Analysis using TNT 
------------------------------

Processing MRP (character state) matrices:

- `ncbicon` - builds TNT constraint commands based on the NCBI common tree for the TreeBASE species.
- `tntdata` - for each tree block in a *.dat file, creates a *.tnt file with the MRP matrix for that tree block, in TNT
syntax. So, for $study.dat creates $study.dat.$treeBlock1.tnt, $study.dat.$treeBlock2.tnt, and so on. Also creates 
for each *.dat file, a *.run file that contains the file inclusion commands (TNT syntax) to pull in all the MRP
matrices for a given study.
- `tntscript` - creates a file `tntscript.runall` thath combines all the file inclusion commands from `tntdata` into a 
single file.

So, in the end there is a `tntscript.runall` that contains a long list of file inclusion commands. Each inclusion command
pulls in the MRP matrix for a single tree block in study. The rows in each MRP matrix are NCBI species identifiers.
For the actual analysis in TNT there is the script [tntwrap](https://github.com/TreeBASE/supertreebase/tree/master/data/treebase/tntwrap). Here are some thoughs and
experiences with this:
- The first step in that script is to increase RAM. On the Naturalis workstation there is enough RAM to load all the data. 
TNT gives an indication for how much RAM it would need - but that's only for the data itself, not for any trees. 
It appears that we need much more RAM than TNT suggests.
- TNT has some non-standard facility for parallel searches (not based on MPI or OpenMP), which involves the `ptnt`
command. I never got this to work properly.
- I also never got the commands that I cribbed from DOI:10.1111/j.1096-0031.2009.00255.x to work as advertised. Someone
with a fairly intimate knowledge of the TNT language is going to have to deal with this. I guess in principle it's
only a couple of lines of code that should go in the `tntwrap` but I can't figure it out.

Analysis using SDM 
------------------------------

Building a distance based supermatrix:
- `sdmdist` - converts the treeblock MRP matrices (*.dat files) into distance matrices (*.sdm) and also adds log files.
The distances are calculated for every combination of taxa as follows: Hamming distance (counting differences for character
positions) divided by taxon count and character count.
- `sdminput` - every matrix is written to a input file for the SDM program. Also the number of matrices should be included.
This step also includes filtering out empty/failed conversion files, so that the right number of actual input matrices is passed to the big SDM input file.

Now the input file can be processed by the SDM program. You could use the following basic command: `sdm -i tb2dist -f PHYLIP_SQUARE`

This should result in a few output files; `mat` the distance based supermatrix, `deformed matrices`, `rates` (the 1/ap values), `tab` table indicating taxa covered by each gene and lastly a `var` file containing the variances of each entry inside the supermatrix.

The `mat` file is used to build the actual supertree.
In case of missing values (-99.0 distances): the MVR* method within the PhyD* package is recommended, 
using the -i YY command for weighing the input based on their size.
In case of a complete matrix: the FastME program can be used!

Partitioning data 
------------------------------

if the normalized *.dat file for every MRP *.txt file was created, the studies can be mapped to the (super)kingdom ranks they cover.

- `studyspecies` - creates a table file `study_species.txt` where every study is linked to the found species; study_ID \t species_count \t species_tax_ID,species_tax_ID,...
- `classes` - traces back every species id to class level with help of the NCBI taxonomy, creating the following table `classes.txt`; class_name \t species_count \t study_count \t study_id_filename, study_id_filename, ...
- `sdm_partitions` - create SDM files for the found class ranks, containing the distance matrices for each found study. For example; tb2dist_Mammalia.
- `tnt_partitions` - same as above, except the files contain TNT file inclusion commands for the found studies, named as; tntscript.runMammalia.



# TNT for infering phylogenies (from MRP formatted input for example)
alias tnt='/home/ubuntu/Downloads/tnt64-no-tax-limit/./tnt.command'


# SDM program for distance based phylogenomic (super)tree building
alias sdm='java -Xmx1200g -jar /home/ubuntu/Downloads/SDM/SDM.jar' 

# PhyD* program for MVR run (in case of missing data entries in SDM output)
alias phyd='java -Xmx1200g -jar /home/ubuntu/Downloads/PhyDstar/PhyDstar.jar'


# SDM program for distance based phylogenomic (super)tree building
# using variable memory usage
alias sdm='java -Xmx1200g -jar /home/ubuntu/Downloads/SDM/SDM.jar' 

# SDM commandline arguments

# square non-subreplicate matrix for further processing
# weighing the input based on their size is also a possibility!
sdm -i 'infile' -f PHYLIP_SQUARE #-s YY -t T 

# PhyD* program for MVR run (in case of missing data entries in SDM output)
alias phyd='java -Xmx1200g -jar /home/ubuntu/Downloads/PhyDstar/PhyDstar.jar'

# In case of complete matrix, you can use the "fastme" program,
# called by the command of the same name


### Process primate data to SDM input (for testing) ###


# count input trees
find *.dat | wc -l >> primates_nwck
# write trees
for f in *.dat; do perl make_dist.pl -i "$f" >> primates_nwck;  done
# SDM run 
sdm -i "primates_nwck" -t T -f PHYLIP_SQUARE -s Y#Y
# Tree inference 
phyd -i "primates_nwck_sdm_mat.txt" #bionj
phyd -i "primates_nwck_sdm_mat.txt" -d mvr


### Testing new distances based on NCBI lineage/nodes ###

# for now it works to combine trees which must overlap at least on phylum level 

sudo rm data/treebase/*.nwk ;
sudo rm TESTING*
sudo rm *.log

# chordata
sudo python3 make_sdm_dist_ncbi.py -l lineages.txt -i data/treebase/S1496.dat -o ./ ;

# metazoa/mammalia/rodentia/primata
sudo python3 make_sdm_dist_ncbi.py -l lineages.txt -i data/treebase/S16426.dat -o ./ ;
sudo python3 make_sdm_dist_ncbi.py -l lineages.txt -i data/treebase/S599.dat -o ./ ;
sudo python3 make_sdm_dist_ncbi.py -l lineages.txt -i data/treebase/S10791.dat -o ./ ;
sudo python3 make_sdm_dist_ncbi.py -l lineages.txt -i data/treebase/S1818.dat -o ./ ;
sudo python3 make_sdm_dist_ncbi.py -l lineages.txt -i data/treebase/S14426.dat -o ./ ;
# mammalia
sudo python3 make_sdm_dist_ncbi.py -l lineages.txt -i data/treebase/S12161.dat -o ./ ;

# fungi
#sudo python3 make_sdm_dist_ncbi.py -l lineages.txt -i data/treebase/S1216.dat -o ./ ;

# fungi and a lot of other creatures
#sudo python3 make_sdm_dist_ncbi.py -l lineages.txt -i data/treebase/S2020.dat -o ./ ;
# mostly fungi, also some plants and other creatures
#sudo python3 make_sdm_dist_ncbi.py -l lineages.txt -i data/treebase/S2037.dat -o ./ ;
# mostly plants, and other eukaryotes
#sudo python3 make_sdm_dist_ncbi.py -l lineages.txt -i data/treebase/S752.dat -o ./ ;
# mostly plants
#sudo python3 make_sdm_dist_ncbi.py -l lineages.txt -i data/treebase/S1515.dat -o ./ ;

# plants, bacteria, fungi, etc
#sudo python3 make_sdm_dist_ncbi.py -l lineages.txt -i data/treebase/S2145.dat -o ./ ;

find data/treebase/*.nwk | wc -l >> TESTING ;
cat data/treebase/*.nwk >> TESTING ;

sdm -i "TESTING" -t D -f PHYLIP_SQUARE ; #-s YY ;
phyd -i "TESTING_sdm_mat.txt" -d mvr -v "TESTING_sdm_var.txt" ; 

sudo python3 make_sdm_dist_ncbi.py -l lineages.txt -i data/treebase/S1486.dat -o ./ ;

# try making trees first!
phyd -m 30 -i "TESTING" -d unj
# add number
sdm -i "TESTING_unj.t" -t T -f PHYLIP_SQUARE ;#-s YY;
phyd -i "TESTING_unj.t_sdm_mat.txt" -d mvr -v "TESTING_unj.t_sdm_var.txt" ; 

# alternatively, try for primate data

for f in *.dat; do python label_primates.py -i "$f" -n /home/ubuntu/supertreebase/data/taxdmp/names.dmp ;  done

rm *.log.*
rm *.nwk
rm *_sdm_*
rm TESTING_primates*

for f in *.test; do python3 ../make_sdm_dist_ncbi.py -i "$f" -l ../lineages.txt -o ./ ;  done
find *.nwk | wc -l #>> TESTING_primates ;
cat *.nwk >> TESTING_primates ;

# try making trees first!
phyd -m 191 -i "TESTING_primates" -d mvr
# add number
sdm -i "TESTING_primates_mvr.t" -t T -f PHYLIP_SQUARE -s YY;
phyd -i "TESTING_primates_mvr.t_sdm_mat.txt" -d mvr -v "TESTING_primates_mvr.t_sdm_var.txt" ; 

sdm -i "TESTING_primates" -t D -f PHYLIP_SQUARE -s YY ;
phyd -i "TESTING_primates_sdm_mat.txt" -d mvr -v "TESTING_primates_sdm_var.txt" ; 

sdm -i "tb2dist_Arachnida" -t D -f PHYLIP_SQUARE -s YY ;
phyd -i "tb2dist_Arachnida_sdm_mat.txt" -d mvr
#OR:
phyd -m 115 -i "tb2dist_Arachnida" -d mvr
sdm -i "tb2dist_Arachnida_mvr.t" -t T -f PHYLIP_SQUARE ;